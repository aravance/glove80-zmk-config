/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LALT))

// layers
#define DEFAULT 0
#define LOWER 1
#define NUMPAD 2
#define MAGIC 3

/ {
    behaviors {
        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        td_lshft: tap_dance_lshft {
            compatible = "zmk,behavior-tap-dance";
            label = "LSHFT_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LSHFT>, <&kp LS(LALT)>;
        };

        td_lctrl: tap_dance_lctrl {
            compatible = "zmk,behavior-tap-dance";
            label = "LCTRL_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LCTRL>, <&kp LC(LALT)>;
        };

        td_rshft: tap_dance_rshft {
            compatible = "zmk,behavior-tap-dance";
            label = "RSHFT_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp RSHFT>, <&kp RS(LALT)>;
        };

        td_rctrl: tap_dance_rctrl {
            compatible = "zmk,behavior-tap-dance";
            label = "RCTRL_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp RCTRL>, <&kp RC(LALT)>;
        };

        td_lcmd: tap_dance_lcmd {
            compatible = "zmk,behavior-tap-dance";
            label = "LCMD_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LCMD>, <&kp LALT>;
        };

        td_lalt: tap_dance_lalt {
            compatible = "zmk,behavior-tap-dance";
            label = "LALT_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LALT>, <&kp LCMD>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2  | PREV | NEXT | PLAY  |                                                             | MUTE | VLDN | VLUP |  F11 |  F12 |
            // |   `   |  1   |  2   |   3  |   4   |  5  |                                                 |  6  |   7  |   8  |   9  |   0  |   -  |
            // |  TAB  |  Q   |  W   |   E  |   R   |  T  |                                                 |  Y  |   U  |   I  |   O  |   P  |   \  |
            // |  ESC  |  A   |  S   |   D  |   F   |  G  |                                                 |  H  |   J  |   K  |   L  |   ;  |   '  |
            // |   =   |  Z   |  X   |   C  |   V   |  B  | LSHFT | LCTRL | LAYER | | HYPER | RCTRL | RSHFT |  N  |   M  |   ,  |   .  |   /  | RCMD |
            // | MAGIC | LEFT | DOWN |  UP  | RIGHT |     |  BSPC |  DEL  |  LCMD | |  LALT |  RET  | SPACE |     | HOME |  END |   [  |   ]  |  PWR |

            bindings = <
            &kp F1          &kp F2    &kp C_PREV  &kp C_PP  &kp C_NEXT                                                                                       &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &kp F11   &kp F12
            &kp GRAVE       &kp N1    &kp N2      &kp N3    &kp N4      &kp N5                                                                       &kp N6  &kp N7      &kp N8        &kp N9        &kp N0    &kp MINUS
            &kp TAB         &kp Q     &kp W       &kp E     &kp R       &kp T                                                                        &kp Y   &kp U       &kp I         &kp O         &kp P     &kp BSLH
            &kp ESC         &kp A     &kp S       &kp D     &kp F       &kp G                                                                        &kp H   &kp J       &kp K         &kp L         &kp SEMI  &kp SQT
            &kp EQUAL       &kp Z     &kp X       &kp C     &kp V       &kp B   &td_lshft   &td_lctrl   &to LOWER  &kp HYPER   &td_rctrl &td_rshft   &kp N   &kp M       &kp COMMA     &kp DOT       &kp FSLH  &kp RCMD
            &magic MAGIC 0  &kp LEFT  &kp DOWN    &kp UP    &kp RIGHT           &kp BSPC    &kp DEL     &td_lcmd   &td_lalt    &kp RET   &kp SPACE           &kp HOME    &kp END       &kp LBKT      &kp RBKT  &kp C_PWR
            >;
        };

        lower_layer {
            bindings = <
            &kp C_BRI_DN  &kp C_BRI_UP  &trans      &trans      &trans                                                                                       &trans      &trans      &trans      &trans      &trans
            &trans        &kp F1        &kp F2      &kp F3      &kp F4      &kp F5                                                               &kp F6      &kp F7      &kp F8      &kp F9      &kp F10     &trans
            &trans        &kp LS(N1)    &kp LS(N2)  &kp LS(N3)  &kp LS(N4)  &kp LS(N5)                                                           &kp LS(N6)  &kp LS(N7)  &kp LS(N8)  &kp LS(N9)  &kp LS(N0)  &trans
            &trans        &kp N1        &kp N2      &kp N3      &kp N4      &kp N5                                                               &kp N6      &kp N7      &kp N8      &kp N9      &kp N0      &trans
            &trans        &kp F11       &kp F12     &kp GRAVE   &kp EQUAL   &kp TAB     &trans  &trans  &to NUMPAD  &to DEFAULT  &trans  &trans  &kp ESC     &kp MINUS   &kp LBKT    &kp RBKT    &kp BSLH    &trans
            &trans        &trans        &trans      &trans      &trans                  &trans  &trans  &trans      &trans       &trans  &trans              &trans      &trans      &trans      &trans      &trans
            >;
        };

        numpad_layer {
            bindings = <
            &trans  &trans       &trans    &trans    &trans                                                                                     &trans      &trans        &trans         &trans           &trans
            &trans  &none        &none     &none     &none      &kp HOME                                                             &kp LPAR   &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp PAUSE_BREAK
            &trans  &none        &none     &kp UP    &none      &kp END                                                              &kp RPAR   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp PSCRN
            &trans  &none        &kp LEFT  &kp DOWN  &kp RIGHT  &kp PG_UP                                                            &kp PRCNT  &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &kp SLCK
            &trans  &kp K_CMENU  &kp CAPS  &kp F11   &kp F12    &kp PG_DN   &trans  &trans  &to LOWER   &to DEFAULT  &trans  &trans  &kp COMMA  &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &trans
            &trans  &trans       &trans    &trans    &trans                 &trans  &trans  &trans      &trans       &trans  &trans             &kp KP_N0   &kp KP_N0     &kp KP_DOT     &kp KP_ENTER     &trans
            >;
        };

        magic_layer {
            bindings = <
            &bt BT_CLR        &none               &none           &none           &none                                                                                                           &none      &none      &none      &none      &bt BT_CLR_ALL
            &none             &none               &none           &none           &none           &none                                                                                &none      &none      &none      &none      &none      &none
            &none             &rgb_ug RGB_SPI     &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_BRI &rgb_ug RGB_TOG                                                                      &none      &none      &none      &none      &none      &none
            &bootloader       &rgb_ug RGB_SPD     &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_BRD &rgb_ug RGB_EFF                                                                      &none      &none      &none      &none      &none      &bootloader
            &sys_reset        &none               &none           &none           &none           &none           &bt_2     &bt_3     &none            &none     &none     &none       &none      &none      &none      &none      &none      &sys_reset
            &none             &none               &none           &none           &none                           &bt_0     &bt_1     &out OUT_USB     &none     &none     &none                  &none      &none      &none      &none      &none
            >;
        };
    };
};
